# -*- coding: utf-8 -*-
"""Tarea 03 - NGNF. Martina Núñez

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TNreyjqpGuovICAK_s-L1Kq4kO58t-tp

Se creará una tabla que representará los 5 días de la semana en los que dedico tiempo a la actividad física. Estos días son lunes, martes, miércoles, jueves y viernes. La actividad física en este caso es la danza, específicamente folclórica, la cueca.

La tabla constará de 4 columnas: una para los días, otra para la hora de inicio, una tercera para la hora de finalización y, por último, una columna que calculará el total de horas al día. Finalmente, se añadirá una fila que indicará el total de horas destinadas a mi actividad a lo largo de la semana.
"""

import pandas as pd
from datetime import datetime

#Datos de los "días", "horas de partida" y "hora final" respecto a mi actividad de interes que es bailar
data = {
    'Días': ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Total'],
    'Hora de partida': ['6:00pm', '6:00pm', '6:00pm', '6:00pm', '5:00pm', ''],
    'Hora final': ['9:00pm', '7:00pm', '9:00pm', '10:00pm', '10:00pm', ''],
}

#Función para convertir el formato de horas, de 12 horas a 24 horas.
def convertir_a_24_horas(hora): #define una función llamada convertir_a_24_horas que toma un argumento llamado hora.
    if hora: #verifica si la variable hora no es una cadena vacía o nula.
        return datetime.strptime(hora, '%I:%M%p').strftime('%H:%M')
        #"datetime.strptime(hora, '%I:%M%p')" utiliza la función strptime del módulo datetime para analizar la cadena hora según el formato especificado '%I:%M%p'. 'I' representa la hora en formato de 12 horas, 'M' representa los minutos y 'p' indica si es AM o PM.
        #"strftime('%H:%M')" luego, convierte el resultado analizado en un nuevo formato con strftime, utilizando '%H:%M' para representar la hora en formato de 24 horas con minutos. Esto devuelve una cadena en formato de 24 horas.
    else:
        return '' #si la variable hora es una cadena vacía o nula (lo que significa que no se proporcionó una hora válida), la función simplemente devuelve una cadena vacía para indicar que no se pudo realizar la conversión.

#Convertir las horas a formato de 24 horas
data['Hora de partida'] = [convertir_a_24_horas(hora) for hora in data['Hora de partida']]
data['Hora final'] = [convertir_a_24_horas(hora) for hora in data['Hora final']]

#Calcular las horas totales en danza y agregar la fila "Total"
horas_totales = []

for inicio, fin in zip(data['Hora de partida'], data['Hora final']): #Este bucle itera a través de dos listas en paralelo: data['Hora de partida'] y data['Hora final']. Esto significa que en cada iteración, inicio tomará el valor de "Hora de partida" y fin tomará el valor de "Hora final" para el mismo día.
    if inicio and fin: #Este bloque if verifica si tanto inicio como fin son valores válidos (diferentes de una cadena vacía o nula). Si ambos tienen valores, significa que hay una hora de partida y final para ese día, por lo que podemos realizar cálculos.
        inicio_hora, inicio_minuto = map(int, inicio.split(':')) #Divide la cadena inicio utilizando split(':') para separar las horas y los minutos, y luego utiliza map(int, ...) para convertir esos valores en enteros. Estos valores se almacenan en las variables inicio_hora y inicio_minuto.
        fin_hora, fin_minuto = map(int, fin.split(':')) #Esto divide la cadena fin en horas y minutos, y los convierte en enteros, que se almacenan en las variables fin_hora y fin_minuto.
        total_horas = fin_hora - inicio_hora #Calcula la diferencia entre las horas de inicio y final, lo que da como resultado las horas totales.
        total_minutos = fin_minuto - inicio_minuto #Calcula la diferencia en minutos entre el inicio y el final.
        if total_minutos < 0: #Verifica si la diferencia en minutos es negativa, lo que significa que hemos pasado a la siguiente hora sin llegar a 60 minutos.
            total_horas -= 1 #Si la diferencia en minutos es negativa, restamos una hora a las horas totales.
            total_minutos += 60 #Luego, sumamos 60 minutos a los minutos totales para obtener el valor correcto.
        horas_totales.append(total_horas + total_minutos / 60) #Calcula las "horas totales en danza" para ese día sumando las horas totales y los minutos convertidos a horas (dividiendo por 60) y lo agrega a la lista horas_totales.
    else:
        horas_totales.append(0) #Si no hay datos de inicio y final para ese día (es decir, el bloque if inicial fue falso), se agrega un 0 a horas_totales para ese día.

data['Horas totales en danza'] = horas_totales #Finalmente, se crea una nueva columna llamada "Horas totales en danza" en los datos data y se le asigna la lista horas_totales que contiene los cálculos de horas totales para cada día.

#Creamos un DataFrame
df = pd.DataFrame(data)

#Calculamos la suma total de horas en danza
total_horas_en_danza = sum(horas_totales[:-1])

#Insertamos el total en la fila "Total"
df.loc[df['Días'] == 'Total', 'Horas totales en danza'] = total_horas_en_danza

#Convertimos las horas totales en "hora" o "horas" según corresponda
#"df['Horas totales en danza']" esto accede a la columna 'Horas totales en danza' del DataFrame 'df'.
#""= df['Horas totales en danza'].apply(...)" el método apply(...) se utiliza para aplicar una función personalizada a cada elemento de la columna 'Horas totales en danza'. Esto permite realizar una transformación en cada valor de la columna.
#"lambda x" aquí se define una función anónima (lambda function) que toma un valor 'x' como entrada.
#"f'{int(x)} hora' if int(x) == 1 else f'{int(x)} horas'" dentro de la función lambda, se realiza una comprobación condicional. Si el valor 'x' (que representa las horas totales) es igual a 1, se formatea como "1 hora". De lo contrario, se formatea como "n horas" (donde 'n' es el número de horas totales).
df['Horas totales en danza'] = df['Horas totales en danza'].apply(lambda x: f'{int(x)} hora' if int(x) == 1 else f'{int(x)} horas')

#Vemos si la tabla quedo como esperamos
print(df)

#Guardamos el DataFrame como un archivo CSV en nuestro Google Drive
csv_filename = '/content/drive/MyDrive/NARRACIÓN GRÁFICA DE NO FICCIÓN/tabla_horas_semanales_danza.csv'
df.to_csv(csv_filename, index=False)

